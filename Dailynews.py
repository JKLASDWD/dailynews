import datetime

import requests
import yaml
from lxml import etree
import re
from lunar_python import Lunar, Solar


# 注意审查
class DailyNews:
    def __init__(self):
        self.agent_url = ""
        self.target_url = ""
        self.text = ""
        self.font_path = ""
        self.news_content = []
        self.news_year = []
        self.today_content = []
        self.today_yi = []
        self.today_ji = []
        self.today_lunar_fes = []
        self.today_solar_fes = []
        self.touhou_festival = []

    def read_url_from_yml(self):
        with open('settings.yml', 'r') as stream:
            data = yaml.safe_load(stream)
            self.agent_url = data['agent_url']
            self.target_url = data['target_url']
            self.font_path = data['font_path']

    def get_news(self):
        self.read_url_from_yml()
        # today_ = datetime.datetime.today().strftime("%#m月%d日")
        today_ = "7月28日"
        url = "{0}/{1}/{2}".format(self.agent_url, self.target_url, today_)
        print(url)
        response = requests.get(
            url,
            headers=
            {
                'User-Agent': 'Mozilla/5.0',
                'Accept-Language': 'en,zh-CN;q=0.9,zh;q=0.8'
            }
        )
        self.text = response.text
        # print(response.text)

    def analyze(self):
        """analyze the news and the today"""
        # re codes are generated by chatgpt
        # 正则表达式用于匹配<a>标签及其内容
        day_lunar = Lunar.fromDate(datetime.datetime.now())
        day_solar = Solar.fromDate(datetime.datetime.now())

        pattern_a = re.compile(r'<a\s+[^>]*>(.*?)</a>', re.DOTALL)
        # 使用sub方法替换匹配的<a>标签为其内容
        self.text = pattern_a.sub(r'\1', self.text)

        # 同上
        pattern_b = re.compile(r'<b>(.*?)</b>', re.DOTALL)
        self.text = pattern_b.sub(r'\1', self.text)

        # small标签及内容去除
        pattern_c = re.compile(r'<small>(.*?)</small>', re.DOTALL)
        self.text = pattern_c.sub(r'', self.text)

        pattern_d = re.compile(r'<span\s+[^>]*>(.*?)</span>', re.DOTALL)
        self.text = pattern_d.sub(r'', self.text)

        self.text = self.text.replace(u'\xa0', u'')

        xpath_analyse = etree.HTML(self.text)
        daily_content = xpath_analyse.xpath('//div[@class="event"]/dd/text()')
        daily_year = xpath_analyse.xpath('//div[@class="event"]/dt/text()')

        self.news_content = daily_content
        self.news_year = daily_year

        week_dict = {0: "星期一", 1: "星期二", 2: "星期三", 3: "星期四", 4: "星期五", 5: "星期六", 6: "星期天"}
        chinese_weekday = week_dict[datetime.datetime.weekday(datetime.datetime.now())]
        self.today_content.append(datetime.datetime.today().strftime('公历%Y年%m月%d日') + chinese_weekday)
        self.today_content.append("农历" + Lunar.getYearInChinese(day_lunar) + "年" + Lunar.getMonthInChinese(
            day_lunar) + "月" + Lunar.getDayInChinese(day_lunar) + "日")

        self.today_yi = Lunar.getDayYi(day_lunar)
        self.today_ji = Lunar.getDayJi(day_lunar)

        self.today_lunar_fes = Lunar.getFestivals(day_lunar)
        self.today_solar_fes = Solar.getFestivals(day_solar)

    def touhou_get_fes(self):
        with open("date.txt", "r+", encoding="UTF-8") as f:
            t = f.readlines()
            str = t[0]
            pattern_d = re.compile(r"\d{4}年\d{2}月\d{2}日 (.+)")
            match = pattern_d.findall(str)
            self.touhou_festival = match[0].split("、")
            f.seek(0)
            f.writelines(t[1:])
            f.truncate()


if __name__ == '__main__':
    news = DailyNews()
    news.get_news()
    news.analyze()
    news.touhou_get_fes()
    print(news.news_year)
    print(news.news_content)
    print(news.today_content)
    print(news.today_yi)
    print(news.today_ji)
    print(news.touhou_festival)
